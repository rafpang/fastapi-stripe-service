[
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "isExtraImport": true,
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "isExtraImport": true,
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "isExtraImport": true,
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "app.db.db_models",
        "description": "app.db.db_models",
        "isExtraImport": true,
        "detail": "app.db.db_models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "app.db.db_models",
        "description": "app.db.db_models",
        "isExtraImport": true,
        "detail": "app.db.db_models",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "run_stripe_checkout_session",
        "importPath": "app.stripe.stripe_checkout",
        "description": "app.stripe.stripe_checkout",
        "isExtraImport": true,
        "detail": "app.stripe.stripe_checkout",
        "documentation": {}
    },
    {
        "label": "PaymentRequest",
        "importPath": "app.request_model.request_models",
        "description": "app.request_model.request_models",
        "isExtraImport": true,
        "detail": "app.request_model.request_models",
        "documentation": {}
    },
    {
        "label": "PaymentRequest",
        "importPath": "app.request_model.request_models",
        "description": "app.request_model.request_models",
        "isExtraImport": true,
        "detail": "app.request_model.request_models",
        "documentation": {}
    },
    {
        "label": "process_successful_payment",
        "importPath": "app.celery_and_tasks.process_successful_payment_task",
        "description": "app.celery_and_tasks.process_successful_payment_task",
        "isExtraImport": true,
        "detail": "app.celery_and_tasks.process_successful_payment_task",
        "documentation": {}
    },
    {
        "label": "process_successful_payment",
        "importPath": "app.celery_and_tasks.process_successful_payment_task",
        "description": "app.celery_and_tasks.process_successful_payment_task",
        "isExtraImport": true,
        "detail": "app.celery_and_tasks.process_successful_payment_task",
        "documentation": {}
    },
    {
        "label": "get_stripe_instance",
        "importPath": "app.stripe.stripe_init",
        "description": "app.stripe.stripe_init",
        "isExtraImport": true,
        "detail": "app.stripe.stripe_init",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "celery",
        "kind": 5,
        "importPath": "app.celery_and_tasks.celery_init",
        "description": "app.celery_and_tasks.celery_init",
        "peekOfCode": "celery = Celery(\n    \"payment_tasks\",\n    broker=\"amqp://admin:mypass@rabbit:5672\",\n    backend=\"amqp://admin:mypass@rabbit:5672\",\n)",
        "detail": "app.celery_and_tasks.celery_init",
        "documentation": {}
    },
    {
        "label": "process_successful_payment",
        "kind": 2,
        "importPath": "app.celery_and_tasks.process_successful_payment_task",
        "description": "app.celery_and_tasks.process_successful_payment_task",
        "peekOfCode": "def process_successful_payment(\n    payment_id,\n    #    email)\n):\n    try:\n        # Update the database to reflect the successful payment\n        db = SessionLocal()\n        db_payment = db.query(Payment).filter(Payment.id == payment_id).first()\n        if db_payment:\n            db_payment.status = \"succeeded\"",
        "detail": "app.celery_and_tasks.process_successful_payment_task",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "peekOfCode": "DATABASE_URL = \"sqlite:///tempdatabase.db\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "app.db.db_models",
        "description": "app.db.db_models",
        "peekOfCode": "class Payment(Base):\n    __tablename__ = \"payments\"\n    id = Column(Integer, primary_key=True, index=True)\n    amount = Column(Integer)\n    currency = Column(String)\n    email = Column(String)\n    status = Column(String)",
        "detail": "app.db.db_models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.db.db_models",
        "description": "app.db.db_models",
        "peekOfCode": "Base = declarative_base()\nclass Payment(Base):\n    __tablename__ = \"payments\"\n    id = Column(Integer, primary_key=True, index=True)\n    amount = Column(Integer)\n    currency = Column(String)\n    email = Column(String)\n    status = Column(String)",
        "detail": "app.db.db_models",
        "documentation": {}
    },
    {
        "label": "PaymentRequest",
        "kind": 6,
        "importPath": "app.request_model.request_models",
        "description": "app.request_model.request_models",
        "peekOfCode": "class PaymentRequest(BaseModel):\n    amount: int\n    currency: str\n    email: str",
        "detail": "app.request_model.request_models",
        "documentation": {}
    },
    {
        "label": "create_payment",
        "kind": 2,
        "importPath": "app.stripe.create_payment",
        "description": "app.stripe.create_payment",
        "peekOfCode": "def create_payment(\n    payment_request: PaymentRequest,\n):\n    try:\n        payment_task_response = run_stripe_checkout_session(payment_request)\n        payment_id = payment_task_response[\"paymentId\"]\n        process_successful_payment.apply_async(args=[payment_id, payment_request.email])\n        return \"Payment processing started asynchronously\"\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=f\"Payment Error: {str(e)}\")",
        "detail": "app.stripe.create_payment",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.stripe.create_payment",
        "description": "app.stripe.create_payment",
        "peekOfCode": "router = APIRouter(prefix=\"/payment\")\n@router.post(\"/create-payment\")\ndef create_payment(\n    payment_request: PaymentRequest,\n):\n    try:\n        payment_task_response = run_stripe_checkout_session(payment_request)\n        payment_id = payment_task_response[\"paymentId\"]\n        process_successful_payment.apply_async(args=[payment_id, payment_request.email])\n        return \"Payment processing started asynchronously\"",
        "detail": "app.stripe.create_payment",
        "documentation": {}
    },
    {
        "label": "run_stripe_checkout_session",
        "kind": 2,
        "importPath": "app.stripe.stripe_checkout",
        "description": "app.stripe.stripe_checkout",
        "peekOfCode": "def run_stripe_checkout_session(payment_request: PaymentRequest):\n    try:\n        stripe = get_stripe_instance()\n        session = stripe.checkout.Session.create(\n            payment_method_types=[\"card\", \"paynow\"],\n            line_items=[\n                {\n                    \"price\": \"price_123\",\n                    \"quantity\": 1,\n                }",
        "detail": "app.stripe.stripe_checkout",
        "documentation": {}
    },
    {
        "label": "get_stripe_instance",
        "kind": 2,
        "importPath": "app.stripe.stripe_init",
        "description": "app.stripe.stripe_init",
        "peekOfCode": "def get_stripe_instance():\n    stripe.api_key = os.environ.get(\"STRIPE_SECRET_KEY\")\n    return stripe",
        "detail": "app.stripe.stripe_init",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.stripe.webhook",
        "description": "app.stripe.webhook",
        "peekOfCode": "router = APIRouter(prefix=\"/webhook\")\n@router.post(\"/stripe-webhook\")\nasync def stripe_webhook(request: Request, stripe=Depends(get_stripe_instance)):\n    try:\n        event = await request.json()\n        webhook_secret = os.environ.get(\"STRIPE_WEBHOOK_SECRET\")\n        stripe_event = stripe.Webhook.construct_event(\n            payload=event, secret=webhook_secret\n        )\n        if stripe_event.type == \"payment_intent.succeeded\":",
        "detail": "app.stripe.webhook",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\napp.include_router(create_payment_router)\napp.include_router(webhook_router)\n# Define the send_email_with_qr function\n# def send_email_with_qr(recipient_email, payment_id):\n#     MAILGUN_DOMAIN = \"HELLO\"\n#     MAILGUN_API_KEY = \"API KEY\"\n#     try:\n#         # Generate QR code with the payment ID as the data\n#         qr = qrcode.QRCode(",
        "detail": "app.main",
        "documentation": {}
    }
]