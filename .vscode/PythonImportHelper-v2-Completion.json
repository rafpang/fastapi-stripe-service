[
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "isExtraImport": true,
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "isExtraImport": true,
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "isExtraImport": true,
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "app.db.db_models",
        "description": "app.db.db_models",
        "isExtraImport": true,
        "detail": "app.db.db_models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "app.db.db_models",
        "description": "app.db.db_models",
        "isExtraImport": true,
        "detail": "app.db.db_models",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "run_stripe_checkout_session",
        "importPath": "app.stripe.stripe_checkout",
        "description": "app.stripe.stripe_checkout",
        "isExtraImport": true,
        "detail": "app.stripe.stripe_checkout",
        "documentation": {}
    },
    {
        "label": "PaymentRequest",
        "importPath": "app.request_model.request_models",
        "description": "app.request_model.request_models",
        "isExtraImport": true,
        "detail": "app.request_model.request_models",
        "documentation": {}
    },
    {
        "label": "PaymentRequest",
        "importPath": "app.request_model.request_models",
        "description": "app.request_model.request_models",
        "isExtraImport": true,
        "detail": "app.request_model.request_models",
        "documentation": {}
    },
    {
        "label": "process_successful_payment",
        "importPath": "app.celery_and_tasks.process_successful_payment_task",
        "description": "app.celery_and_tasks.process_successful_payment_task",
        "isExtraImport": true,
        "detail": "app.celery_and_tasks.process_successful_payment_task",
        "documentation": {}
    },
    {
        "label": "process_successful_payment",
        "importPath": "app.celery_and_tasks.process_successful_payment_task",
        "description": "app.celery_and_tasks.process_successful_payment_task",
        "isExtraImport": true,
        "detail": "app.celery_and_tasks.process_successful_payment_task",
        "documentation": {}
    },
    {
        "label": "get_stripe_instance",
        "importPath": "app.stripe.stripe_init",
        "description": "app.stripe.stripe_init",
        "isExtraImport": true,
        "detail": "app.stripe.stripe_init",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "celery",
        "kind": 5,
        "importPath": "app.celery_and_tasks.celery_init",
        "description": "app.celery_and_tasks.celery_init",
        "peekOfCode": "celery = Celery(\n    \"payment_tasks\",\n    broker=\"amqp://admin:mypass@rabbit:5672\",\n    backend=\"amqp://admin:mypass@rabbit:5672\",\n)",
        "detail": "app.celery_and_tasks.celery_init",
        "documentation": {}
    },
    {
        "label": "process_successful_payment",
        "kind": 2,
        "importPath": "app.celery_and_tasks.process_successful_payment_task",
        "description": "app.celery_and_tasks.process_successful_payment_task",
        "peekOfCode": "def process_successful_payment(\n    payment_id,\n    #    email)\n):\n    try:\n        # Update the database to reflect the successful payment\n        db = SessionLocal()\n        db_payment = db.query(Payment).filter(Payment.id == payment_id).first()\n        if db_payment:\n            db_payment.status = \"succeeded\"",
        "detail": "app.celery_and_tasks.process_successful_payment_task",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "peekOfCode": "DATABASE_URL = \"sqlite:///tempdatabase.db\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.db.db_init",
        "description": "app.db.db_init",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "app.db.db_init",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "app.db.db_models",
        "description": "app.db.db_models",
        "peekOfCode": "class Payment(Base):\n    __tablename__ = \"payments\"\n    id = Column(String, primary_key=True, index=True)\n    payee = Column(String)\n    num_tickets = Column(Integer)\n    seat_details = Column(String)\n    email = Column(String)\n    amount = Column(Integer)",
        "detail": "app.db.db_models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.db.db_models",
        "description": "app.db.db_models",
        "peekOfCode": "Base = declarative_base()\nclass Payment(Base):\n    __tablename__ = \"payments\"\n    id = Column(String, primary_key=True, index=True)\n    payee = Column(String)\n    num_tickets = Column(Integer)\n    seat_details = Column(String)\n    email = Column(String)\n    amount = Column(Integer)",
        "detail": "app.db.db_models",
        "documentation": {}
    },
    {
        "label": "PaymentRequest",
        "kind": 6,
        "importPath": "app.request_model.request_models",
        "description": "app.request_model.request_models",
        "peekOfCode": "class PaymentRequest(BaseModel):\n    # amount: int\n    price_id: str\n    quantity: int\n    payer: str\n    email: str\n    seat_location: str\n    show_time: str",
        "detail": "app.request_model.request_models",
        "documentation": {}
    },
    {
        "label": "create_payment",
        "kind": 2,
        "importPath": "app.stripe.payment_route",
        "description": "app.stripe.payment_route",
        "peekOfCode": "def create_payment(\n    payment_request: PaymentRequest,\n):\n    try:\n        price_id = payment_request.price_id\n        quantity = payment_request.quantity\n        email = payment_request.email\n        payer = payment_request.payer\n        seat_location = payment_request.seat_location\n        show_time = payment_request.show_time",
        "detail": "app.stripe.payment_route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.stripe.payment_route",
        "description": "app.stripe.payment_route",
        "peekOfCode": "router = APIRouter(prefix=\"/payment\")\n@router.post(\"/checkout\")\ndef create_payment(\n    payment_request: PaymentRequest,\n):\n    try:\n        price_id = payment_request.price_id\n        quantity = payment_request.quantity\n        email = payment_request.email\n        payer = payment_request.payer",
        "detail": "app.stripe.payment_route",
        "documentation": {}
    },
    {
        "label": "run_stripe_checkout_session",
        "kind": 2,
        "importPath": "app.stripe.stripe_checkout",
        "description": "app.stripe.stripe_checkout",
        "peekOfCode": "def run_stripe_checkout_session(\n    price_id: str,\n    quantity: int,\n    email: str,\n    payer: str,\n    seat_location: str,\n    show_time: str,\n):\n    try:\n        stripe = get_stripe_instance()",
        "detail": "app.stripe.stripe_checkout",
        "documentation": {}
    },
    {
        "label": "get_stripe_instance",
        "kind": 2,
        "importPath": "app.stripe.stripe_init",
        "description": "app.stripe.stripe_init",
        "peekOfCode": "def get_stripe_instance():\n    stripe.api_key = os.environ.get(\"STRIPE_SECRET_KEY\")\n    return stripe",
        "detail": "app.stripe.stripe_init",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.stripe.webhook_route",
        "description": "app.stripe.webhook_route",
        "peekOfCode": "router = APIRouter(prefix=\"/webhook\")\n# metadata={\n#                 \"payer\": payer,\n#                 \"email\": email,\n#                 \"quantity\": quantity,\n#                 \"seat_location\": seat_location,\n#                 \"show_time\": show_time,\n#             },\n@router.post(\"/stripe-webhook\")\nasync def stripe_webhook(request: Request, stripe=Depends(get_stripe_instance)):",
        "detail": "app.stripe.webhook_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(payment_router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "origins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(payment_router)\napp.include_router(webhook_router)",
        "detail": "app.main",
        "documentation": {}
    }
]